*branchname.txt*    BranchName plugin for vim.  Last change 2023 Oct 15

Maintainer: Preben Guldberg <preben@guldberg.org>
License:    MIT, see |branchname-plugin-license|.


Introduction                                                      *branchname*

|BranchName()| determines the branch name for the file in the current buffer.

Supported version control systems are fossil, git and mercurial.

The plugin will search the directory the file resides in and all parent
directories until an indicator that version control is in use.

For efficiency, the branch name is cached for all searched directories,
along with the mtime of the repository file or directory.  If the mtime
of the file or directory is newer than the cached mtime, the branch name
is resolved again.

----------------------------------------------------------------------------
Configuration                                       *branchname-configuration*
                                                    *g:branchname_config*

The configuration is done using the `g:branchname_config` variable.
The default is the equivalent of
>
    let g:branchname_config = {
        \   'default': {
        \       'pre': '',
        \       'post': '',
        \       'showref': 0,
        \       'ttl': 300
        \   },
        \   'fossil': {
        \       'cmd': 'fossil',
        \       'ref': 'fsl:'
        \   },
        \   'git': {
        \       'cmd': 'git',
        \       'ref': 'git:'
        \   },
        \   'mercurial': {
        \       'cmd': 'hg',
        \       'ref': 'hg:'
        \   }
        \ }
<
Above, the keys are either 'default' or a named version control system.
Each of the dictionary values can have the following keys:

    cmd:      Command name to run.  The plugin adds suitable arguments.
              If an empty string, |BranchName()| returns ''.
    pre:      String to prepend to the result string.
    post:     String to append to the result string.
    ref:      Reference name, optionally prepended to the branch name.
    showref:  Boolean, indicating whether the ref value should be used.
    ttl:      Time to live for cache items.  Use 0 to never expire items.
              Can only be set in the 'default' section.

The resulting string is the concatenation of

    1. The 'pre' string.
    2. The 'ref' string, if 'showref' is true.
    3. The branch named determined by running 'cmd'.
    4. The 'post' string.

Sample results:                                            *branchname-result*

Assuming a configuration of
>
    let g:branchname_config = {
        \ 'default': { 'pre': '[', 'post': ']', 'showref': 1 },
        \ 'fossil': { 'cmd': '~/bin/fossil', 'showref': 0 },
        \ }
<
and assuming your branch is called `my-test-branch`, the results would be:

- fossil:    `[my-test-branch]`
- git:       `[git:my-test-branch]`
- mercurial: `[hg:my-test-branch]`

----------------------------------------------------------------------------
Commands                                                 *branchname-commands*

The following commands are defined by the plugin:

BranchName()                                                    *BranchName()*
        The function returns a branch name, formatted as discussed in
        |branchname-configuration|.

        If no version control related file or directory is found, of if the
        current buffer name is empty, the result is always an empty string.

BranchNameClearCache()                                *BranchNameClearCache()*
        Clear the internal cache.  Mainly useful if you have set up version
        control after the cache was populated.

BranchNameFromPath({path})                              *BranchNameFromPath()*
        Returns the resolved branch name as with |BranchName()|, except
        you specify the {path} to resolve for directly.  Mainly for testing.

BranchNameDumpCache()                                  *BranchNameDumpCache()*
        Print a dump of the current cache for debugging purposes.

BranchNameGlobalError()                              *BranchNameGlobalError()*
        Print the global plugin error for debugging purposes.  Currently
        only used to save any error messages when running the `cmd`.

----------------------------------------------------------------------------
License                                            *branchname-plugin-license*

Copyright (c) 2023 Preben Guldberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
